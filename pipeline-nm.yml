# Ce pipeline est déclenché lorsqu'une modification est apportée à la branche master
trigger:
- master

# Définition des variables utilisées dans le pipeline
variables:
  dockerRegistryServiceConnection: 'ConnectDockerHub'
  imageRepository: 'k8b8nm'
  containerRegistry: 'nemesys34'
  repository: 'nemesys34/k8b8nm'
  kubernetesServiceEndpoint: 'connectK8SNM'
  aksClusterName: 'K8B8NM'
  organization: 'nicolasmarty'
  connecteursonarcloud: 'connect_sonar'

# # Liste des étapes du pipeline
stages:
# # Etape 1 : Valider l'application
# - stage: 'valid_app'
#   displayName: 'valid_app'
#   jobs:
#   - job: version_compare
#     displayName: 'validcode' 
#     # Utiliser une image Ubuntu pour l'environnement d'exécution
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     # Récupérer le code source
#     - checkout: self
#       fetchDepth: 0
#     # Préparer l'analyse SonarCloud
#     - task: SonarCloudPrepare@1
#       inputs:
#         SonarCloud: $(connecteursonarcloud)
#         organization: $(organization)
#         scannerMode: 'CLI'
#         configMode: 'manual'
#         cliProjectKey: 'uncia-key'
#         cliProjectName: 'Brief-8'
#         cliSources: '.'
#     # Exécuter l'analyse SonarCloud
#     - task: SonarCloudAnalyze@1
#     # Publier les résultats de l'analyse SonarCloud
#     - task: SonarCloudPublish@1
#       inputs:
#         pollingTimeoutSec: '300'

- stage: test_grype
  displayName: test avec grype
  # Exécuter cette étape seulement si les étapes précédentes ont réussi
  jobs:
  - job: test_grype
    displayName: test avec grype
    pool:
      # Utiliser une image Ubuntu la plus récente pour l'exécution des tâches
      vmImage: 'ubuntu-latest'
    steps:
    # Installer l'outil grype à l'aide du script d'installation
    - task: CmdLine@2
      inputs:
        script: |
          sudo curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
    # Exécuter l'outil grype pour analyser les vulnérabilités et stocker le résultat dans une variable
    - task: CmdLine@2
      name: finalresult
      inputs:
        script: |
          sudo grype dir:/home/vsts/work/1/
          grype_var=$(echo $?)
          echo "##vso[task.setvariable variable=gryre;isOutput=true]$grype_var"
- stage: Verificationgrype
  displayName: Vérification manuelle grype
  # Cette étape dépend de l'étape 'test_grype'
  dependsOn: test_grype
  # Exécuter cette étape seulement si le résultat de l'étape 'test_grype' est différent de 0 (c'est-à-dire, s'il y a des vulnérabilités)
  condition: ne(dependencies.test_grype.outputs['test_grype.finalresult.gryre'],0)
  jobs:
  - job: Verifmanuelle
    pool: server
    steps:
    # Demander une vérification manuelle en cas de vulnérabilités détectées
    - task: ManualValidation@0
      timeoutInMinutes: 240 # La tâche expire au bout de 4 heures
      inputs:
        notifyUsers: |
          simplon.nicolasmarty@gmail.com
        instructions: 'Please check the problem for grype'
        onTimeout: 'reject'
# Etape 2 : Récupérer la version de l'application
- stage: 'get_version' 
  displayName: 'get_version' 
  condition: or(eq(dependencies.test_grype.outputs['test_grype.finalresult.gryre'],0),succeeded('Verificationgrype'))
  dependsOn: 
  - test_grype
  - Verificationgrype
  jobs:
  - job: 'job_version' 
    displayName: 'job_version' 
    pool:
      vmImage: ubuntu-latest
    steps:
    # Récupérer les informations du déploiement Kubernetes
    - task: Kubernetes@1
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: $(kubernetesServiceEndpoint)
        namespace: 'prod' # Namespace où l'application sera déployée
        command: 'get'
        arguments: 'deployments --field-selector metadata.name=voteapp'
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
      name: "kube"

    # Comparer les versions de l'application
   # Tâche pour déterminer et récupérer les différentes versions de l'application
    - task: CmdLine@2
      inputs:
        script: |
          # Récupérer la dernière version déployée à partir du registre Docker
          versionrep=$((curl "https://hub.docker.com/v2/repositories/$(imageRepository)/tags" | jq '."results"[0]["name"]')| sed 's/^"//;s/"$//')
          
          # Récupérer la version actuellement déployée dans le cluster Kubernetes
          versionold=$(echo $kube_KUBECTLOUTPUT | jq '.items[0].spec.template.spec.containers[].image' | cut -d: -f2 | sed 's/"//')
          
          # Récupérer la version de l'application à partir du fichier main.py
          versionnew=$(cat azure-vote/main.py | grep -E "^ver = \"[0-9.]+\"\$"|awk -F\" {'print $2'})
          
          # Enregistrer les variables pour les étapes suivantes du pipeline
          echo "##vso[task.setvariable variable=vernew;isOutput=true]$versionnew"
          echo "##vso[task.setvariable variable=verrep;isOutput=true]$versionrep"
          echo "##vso[task.setvariable variable=verold;isOutput=true]$versionold"
          
          # Afficher les variables pour vérification
          echo verrep=$versionrep verold=$versionold vernew=$versionnew
      name: "scver" # nom du script de versionning


# Étape pour construire l'image Docker de l'application
- stage: 'Build_docker_image'
  condition: succeeded('get_version')
  variables:
    # Récupérer les versions de l'étape précédente
    verrep: $[stageDependencies.get_version.job_version.outputs['scver.verrep']]
    vernew: $[stageDependencies.get_version.job_version.outputs['scver.vernew']]
  dependsOn:
  - get_version
  displayName: 'Build_docker_image'
  jobs:
  - job: 'Docker_image'
    displayName: 'Docker Image Build'
    pool:
      # Utiliser une image Ubuntu pour le job
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      # Exécuter cette tâche uniquement si la version actuelle est différente de la version du registre Docker
      condition: ne(variables.verrep,variables.vernew)
      inputs:
        # Paramètres pour se connecter au registre Docker
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(repository)
        command: 'buildAndPush' # Construire et pousser l'image Docker
        Dockerfile: '**/Dockerfile' # Spécifier le fichier Dockerfile à utiliser
        tags: | # Ajouter la nouvelle version en tant que tag
          $(vernew)
      name: "docker_pub"
      # analyse de vulnérabilités avec Trivy pour les images de conteneurs 
    # - task: trivy@1
    #   inputs:
    #     image: '$(repository):$(vernew)'

- stage: 'QAL_Deployment'
  dependsOn:
  - get_version
  - Build_docker_image
  # Exécuter cette étape seulement si les étapes précédentes ont réussi
  condition: succeeded('Build_docker_image')
  displayName: 'Deploy on QAL' 
  jobs:
  - job: 'QAL_Deploy'
    variables:
      verold: $[stageDependencies.get_version.job_version.outputs['scver.verold']]
      vernew: $[stageDependencies.get_version.job_version.outputs['scver.vernew']]
    displayName: 'Deploy on QAL' 
    pool:
      # Utiliser une image Ubuntu la plus récente pour l'exécution des tâches
      vmImage: 'ubuntu-latest' 
    steps:
    # Modifier le fichier de manifeste pour utiliser la nouvelle version
    - task: CmdLine@2
      name: change_manif
      inputs:
        script: |
          sed -i 's/{{ version }}/'$(vernew)'/g' manifest/vote-app.yml
    # Déployer l'application sur l'environnement QAL
    - task: KubernetesManifest@0
      name: "kube_qal"
      condition: ne(variables.verold,variables.vernew)
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: 'connectK8SNM' # Connexion au service Kubernetes
        namespace: 'qal' # Namespace où l'application sera déployée
        manifests: manifest/vote-app.yml # Fichier de manifeste à utiliser pour le déploiement
        rolloutStatusTimeout: '60' # Délai d'attente maximal pour le déploiement (en secondes)

- stage: 'Test_Charge'
  condition: succeeded('QAL_Deployment')
  dependsOn:
  - get_version
  - QAL_Deployment
  displayName: 'Test_Charge'
  jobs:
  - job: 'Test'
    timeoutInMinutes: 5
    variables:
      verold: $[stageDependencies.get_version.job_version.outputs['scver.verold']]
      vernew: $[stageDependencies.get_version.job_version.outputs['scver.vernew']]
      appcnt: $[stageDependencies.Test_Charge.Test.outputs['GetPodsCount.appcnt']]
    displayName: 'Test_Charge' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    # Étape 1 : Tester l'application
    - task: Bash@3
      name: apptest
      displayName: app test
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=Windows" http://brief8.uncia.fr -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit1]$exitcode"
    # Étape 2 : Tester le vote pour Linux
    - task: Bash@3
      name: linux
      displayName: Test vote Linux'
      condition: eq(variables['exit1'],'200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=Linux" http://brief8.uncia.fr -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit2]$exitcode"
    # Étape 3 : Tester la requête pour réinitialiser les votes
    - task: Bash@3
      name: checksitereset
      displayName: Test de la requête pour reset
      condition: eq(variables['exit2'],'200')
      inputs:
        targetType: 'inline'
        script: |
          exitcode=$(curl -X POST -d "vote=reset" http://brief8.uncia.fr -w "%{http_code}" -o /dev/null)
          echo "##vso[task.setvariable variable=exit3]$exitcode"
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'
    # Étape 4 : Effectuer un scan de sécurité avec OWASP ZAP
    - task: owaspzap@1
      inputs:
        aggressivemode: true
        scantype: 'targetedScan'
        url: 'http://brief8.uncia.fr'

    # Étape 5 : Comparer les temps de réponse entre l'environnement QAL et l'environnement de production
    - task: CmdLine@2
      condition: eq(variables['exit3'],'200')
      name: timetoresp
      inputs:
        script: |
          inc=0.5
          # Mesurer le temps de réponse pour l'environnement QAL
          trqal=$(curl -o /dev/null -s -w %{time_total}\\n  -iF 'vote=linux' http://brief8.uncia.fr)
          # Mesurer le temps de réponse pour l'environnement de production
          trprod=$(curl -o /dev/null -s -w %{time_total}\\n  -iF 'vote=linux' http://brief8.uncia.fr)
          # Calculer la somme du temps de réponse de production et d'une constante 'inc'
          result=$(echo "$trprod + $inc"|bc)
          # Définir les variables pour les temps de réponse de QAL et de production
          echo "##vso[task.setvariable variable=trqal]$trqal"
          echo "##vso[task.setvariable variable=trprod]$result"
          # Afficher les temps de réponse pour QAL et production
          echo qal=$trqal prod=$trprod
    # Étape 6 : Effectuer un test de charge si le temps de réponse en production est supérieur au temps de réponse en QAL
    - task: CmdLine@2
      condition: and(succeeded(), gt(variables['trprod'],variables['trqal']))
      name: TestCharge
      inputs:
        script: |
          # Exécuter 250 requêtes parallèles avec 20 jobs simultanés
          seq 250 | parallel --max-args 0  --jobs 20 "curl -k -iF 'vote=Linux' http://brief8.uncia.fr"
    # Étape 7 : Attendre 50 secondes
    - task: CmdLine@2
      condition: and(succeeded(), gt(variables['trprod'],variables['trqal']))
      inputs:
        script: 'sleep 50'
      name: "wait"
    # Étape 8 : Récupérer les informations sur les pods Kubernetes
    - task: Kubernetes@1
      name: kubepods
      condition: succeeded()
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'connectK8SNM' # Connexion au service Kubernetes
        namespace: 'qal' # Namespace où l'application sera déployée
        command: 'get'
        useConfigurationFile: true
        configuration: './manifest/vote-app.yml'

    # Étape 9 : Modifier le fichier de manifeste pour utiliser la nouvelle version
    - task: CmdLine@2
      name: change_manif
      inputs:
        script: |
          # Remplacer la chaîne "{{ version }}" par la valeur de la variable 'vernew' dans le fichier manifest/vote-app.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' manifest/vote-app.yml
          # Afficher la nouvelle version
          echo $(vernew)
# Étape 10 : Obtenir le nombre de pods
    - task: CmdLine@2
      condition: succeeded()
      name: "GetPodsCount"
      inputs:
        script: |
          # Récupérer le nombre de réplicas pour l'application "vote"
          voteappcount=$(echo $KUBEPODS_KUBECTLOUTPUT | jq '.items[0].spec.replicas')
          
          # Afficher le nombre de réplicas
          echo $voteappcount
          
          # Sauvegarder le nombre de réplicas dans une variable pour pouvoir l'utiliser plus tard
          echo "##vso[task.setvariable variable=appcnt;isOutput=true]$voteappcount"

- stage: 'Manualvalidation'
  dependsOn:
  - Test_Charge
  condition: failed('Test_Charge') 
  displayName: 'In waiting of validation after tests has runned' 
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 3600
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 3600
      inputs:
        notifyUsers: |
          simplon.nicolasmarty@gmail.com
        instructions: 'Please validate the build configuration and resume'
        onTimeout: 'resume'
# Déployer l'application en utilisant la stratégie canary
- stage: 'Canary_deploy'
  dependsOn:
  - Test_Charge
  - get_version
  condition: or(succeeded('Test_Charge'),succeeded('Manualvalidation'))
  displayName: 'Canary_deploy' 
  jobs:
  - job: 'canary'
    variables:
      verold: $[stageDependencies.get_version.job_version.outputs['scver.verold']]
      vernew: $[stageDependencies.get_version.job_version.outputs['scver.vernew']]
      appcnt: $[stageDependencies.Test_Charge.Test.outputs['GetPodsCount.appcnt']]
    displayName: 'Canary_deploy' 
    pool:
      vmImage: 'ubuntu-latest' 
    steps:
    - task: CmdLine@2
      name: change_manif
      inputs:
        script: |
          # Remplacer la chaîne "{{ version }}" par la valeur de la variable 'vernew' dans le fichier manifest/vote-app.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' manifest/vote-app.yml
    - task: KubernetesManifest@0
      condition: gt(variables.appcnt,2)
      inputs:
        action: 'deploy' # Action à effectuer : déploiement
        kubernetesServiceConnection: 'connectK8SNM' # Connexion au service Kubernetes
        namespace: 'prod' # Namespace où l'application sera déployée
        strategy: 'canary' # Stratégie de déploiement : canary
        percentage: '30' # Pourcentage de trafic à diriger vers le déploiement canary 
        manifests: manifest/vote-app.yml # Fichier de manifeste à utiliser pour le déploiement
        rolloutStatusTimeout: '120' # Délai d'attente maximal pour le déploiement (en secondes)
      name: "kube_canary"

# Attendre la validation manuelle avant de passer à l'étape suivante
- stage: 'ManualIntervention'
  dependsOn:
  - Canary_deploy
  condition: succeeded('Canary_deploy') 
  displayName: 'En attente de validation' 
  jobs:
  - job: waitForValidation
    displayName: Wait for external validation
    pool: server
    timeoutInMinutes: 10080 # job times out in 7 days
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 10080 # task times out in 7 day
      inputs:
        notifyUsers: |
          simplon.nicolasmarty@gmail.com
        instructions: 'Valider le déploiement'
        onTimeout: 'resume'

- stage: 'supcanar'
  # Cette étape (stage) est exécutée lorsque les étapes précédentes échouent
  condition: or(failed('ManualIntervention'),failed('Manualvalidation'))
  dependsOn:
  - get_version
  - ManualIntervention
  - Test_Charge
  displayName: 'remove canary'
  jobs:
  - job: 'delete'
    # Récupérer les variables verold et vernew des étapes précédentes
    variables:
      verold: $[stageDependencies.get_version.job_version.outputs['scver.verold']]
      vernew: $[stageDependencies.get_version.job_version.outputs['scver.vernew']]
    displayName: 'Deploy on prod and remove canary'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CmdLine@2
      name: change_manif
      inputs:
        script: |
          # Remplacer la chaîne "{{ version }}" par la valeur de la variable 'vernew' dans le fichier manifest/vote-app.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' manifest/vote-app.yml
    - task: KubernetesManifest@0
      name: "delete_canary"
      inputs:
        action: 'deploy' # Action à effectuer : déploiement
        kubernetesServiceConnection: 'connectK8SNM' # Connexion au service Kubernetes
        namespace: 'prod' # Namespace où l'application sera déployée
        strategy: 'canary'
        percentage: '0' # Pourcentage de trafic à diriger vers le déploiement canary (0 = supprimer le canary)
        manifests: manifest/vote-app.yml # Fichier de manifeste à utiliser pour le déploiement
        rolloutStatusTimeout: '60' # Délai d'attente maximal pour le déploiement (en secondes)

- stage: 'DeployOnProd'
  dependsOn:
  - Test_Charge
  - Canary_deploy
  - ManualIntervention
  - get_version
  # Cette étape (stage) est exécutée lorsque les étapes précédentes réussissent
  condition: succeeded('ManualIntervention')
  displayName: 'Deploy on Prod and remove canary'
  jobs:
  - job: 'Deployonprod'
    # Récupérer les variables verold et vernew des étapes précédentes
    variables:
      verold: $[stageDependencies.get_version.job_version.outputs['scver.verold']]
      vernew: $[stageDependencies.get_version.job_version.outputs['scver.vernew']]
    displayName: 'Deploy on Prod and remove canary'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: CmdLine@2
      name: change_manif
      inputs:
        script: |
          # Remplacer la chaîne "{{ version }}" par la valeur de la variable 'vernew' dans le fichier manifest/vote-app.yml
          sed -i 's/{{ version }}/'$(vernew)'/g' manifest/vote-app.yml
    - task: KubernetesManifest@0
      name: "delete_canary"
      inputs:
        action: 'deploy' # Action à effectuer : déploiement
        kubernetesServiceConnection: 'connectK8SNM' # Connexion au service Kubernetes
        namespace: 'prod' # Namespace où l'application sera déployée
        strategy: 'canary'
        percentage: '0' # Pourcentage de trafic à diriger vers le déploiement canary (0 = supprimer le canary)
        manifests: manifest/vote-app.yml # Fichier de manifeste à utiliser pour le déploiement
        rolloutStatusTimeout: '60' # Délai d'attente maximal pour le déploiement (en secondes)
    - task: KubernetesManifest@0
      name: "kube_prod"
      inputs:
        action: 'deploy' # Action à effectuer : déploiement'
        kubernetesServiceConnection: 'connectK8SNM' # Connexion au service 
        namespace: 'prod' # Namespace où l'application sera déployée
        manifests: manifest/vote-app.yml # Fichier de manifeste à utiliser pour le déploiement
        rolloutStatusTimeout: '60' # Délai d'attente maximal pour le déploiement (en secondes)
